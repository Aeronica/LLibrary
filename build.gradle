buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.7"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "maven-publish"
apply plugin: "com.matthewprenger.cursegradle"

import groovy.json.JsonSlurper;

def secretFile = file "secret.json"
project.ext.secret = null
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret = new JsonSlurper().parse it
    }
}

version = getLLibraryVersion() + "-1.9.4"
group = "net.ilexiconn"
archivesBaseName = "llibrary"
sourceCompatibility = targetCompatibility = "1.8"

minecraft {
    version = "1.9.4-12.17.0.1987"
    runDir = "minecraft"
    mappings = "stable_26"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar {
    manifest {
        attributes "FMLAT": "llibrary_at.cfg"
        attributes "FMLCorePlugin": "net.ilexiconn.llibrary.server.asm.LLibraryPlugin"
        attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
    manifest {
        attributes "FMLAT": "llibrary_at.cfg"
        attributes "FMLCorePlugin": "net.ilexiconn.llibrary.server.asm.LLibraryPlugin"
        attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.getDestinationDir()
}

artifacts {
    archives devJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "net.ilexiconn"
            artifactId "llibrary"
            version project.version

            from components.java

            artifact devJar {
                classifier "dev"
            }

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            credentials {
                if (secret) {
                    username secret.username
                    password secret.password
                } else {
                    username ""
                    password ""
                }
            }
            if (secret) {
                url secret.url
            } else {
                url ""
            }
        }
    }
}

curseforge {
    def url = "http://pastebin.com/raw/qh3Pnuuk".toURL()
    def versions = new JsonSlurper().parseText url.text

    if (secret) {
        apiKey = secret.apiKey
    } else {
        apiKey = ""
    }

    project {
        id = "243298"

        releaseType = "release"
        def curse_version = getLLibraryVersion()
        def remoteChangelog = versions.versions[curse_version];
        if (remoteChangelog) {
            changelog = remoteChangelog.join("\n")
        } else {
            changelog = ""
        }

        addGameVersion("1.9.4")

        mainArtifact(jar) {
            displayName = "LLibrary $curse_version"
        }

        addArtifact(sourceJar) {
            displayName = "LLibrary $curse_version Sources"
        }

        addArtifact(devJar) {
            displayName = "LLibrary $curse_version Development"
        }

        addArtifact(javadocJar) {
            displayName = "LLibrary $curse_version Javadoc"
        }
    }
}

String getLLibraryVersion() {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String VERSION = \"";
    File file = file("src/main/java/net/ilexiconn/llibrary/LLibrary.java")
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }

    return "$major.$revision.$patch";
}
